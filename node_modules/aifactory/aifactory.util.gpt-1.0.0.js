/*
	AI factory; GPT / LLM
	See README.md

    Example 1: Conversation Assistant
    Check conversations that part of and check for messages that have 
    [@genai:{user message}]
    Post a comment.

    In event mind to a particular conversation.guid for now.
*/

var entityos = require('entityos')
var _ = require('lodash')
var moment = require('moment');

module.exports = 
{
	VERSION: '1.0.0',

	init: function (param)
	{
		entityos.add(
		{
			name: 'ai-util-gpt',
			code: function (param)
			{
                // https://platform.openai.com
                // https://platform.openai.com/docs/api-reference
                // https://github.com/openai/openai-node/blob/master/examples/demo.ts
                
                var event = entityos.get({scope: '_event'});
                var settings = entityos.get({scope: '_settings'});

                const OpenAI = require("openai");

                const openai = new OpenAI(
                {
                    apiKey: settings.ai.gpt.openai.key,
                });

                if (param.model == undefined)
                {
                    param.model = _.get(event, 'ai.gpt.openai.model');
                }

                if (param.model == undefined)
                {
                    param.model = 'gpt-3.5-turbo'
                }

                async function generateText(param)
                {
                    var userMessage = _.get(param, 'userMessage');
                    var systemMessage = _.get(param, 'systemMessage');

                    const completion = await openai.chat.completions.create(
                    {
                        model: param.model,
                        messages:
                        [
                            { role: 'system', content: systemMessage },
                            { role: 'user', content: userMessage }
                        ],
                        max_tokens: 1000,
                        temperature: 0.7
                    });

                    console.log(completion.choices[0]?.message?.content);

                    _.set(param, 'gptMessage', completion.choices[0]?.message?.content);

                    if (_.get(param, 'onComplete') != undefined)
                    {
                        entityos._util.onComplete(param)
                    }
                    else
                    {
                        entityos.invoke('util-end', param);
                    }
                }

                if (param.messages == undefined)
                {
                    param.messages = event.messages;
                }

                if (param.messages == undefined)
                {
                    entityos.invoke('util-end', {error: 'No messages!'});
                }
                else
                {
                    if (param.messages.system == undefined)
                    {
                         param.messages.system = 'You are a learning assistant for a young person'
                    }

                    if (param.messages.user == undefined)
                    {
                        entityos.invoke('util-end', {error: 'No user message (prompt text)'});
                    }
                    else
                    {
                        generateText(
                        {
                            userMessage: param.messages.user,
                            systemMessage: param.messages.system,
                            model: param.model,
                            onComplete: param.onComplete
                        });
                    }
                }
			}
		});
	}
}