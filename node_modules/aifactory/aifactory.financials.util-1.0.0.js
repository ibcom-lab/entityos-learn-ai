/*
	AI factory; Financials
	See README.md

    TODO;
    - Set zero value transaction to status: 2
    - See if can find invoice / expense (as other type of mapping)
    */

var mydigitalstructure = require('mydigitalstructure')
var _ = require('lodash')
var moment = require('moment');
var numeral = require('numeral');

module.exports = 
{
	VERSION: '1.0.0',

	init: function (param)
	{
        //-- BANK ACCOUNTS

		mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts',
            code: function (param, response)
            {
                if (response == undefined)
                {
                    var filters =
                    [
                        {
                            field: 'status',
                            comparison: 'EQUAL_TO',
                            value: '1'
                        }
                    ];

                    mydigitalstructure.cloud.search(
                    {
                        object: 'financial_bank_account',
                        fields:
                        [
                            {name: 'accountname'},
                            {name: 'accountnumber'},
                            {name: 'accounttype'}, {name: 'accounttypetext'},
                            {name: 'bank'},
                            {name: 'bsb'},
                            {name: 'currency'},  {name: 'currencytext'},
                            {name: 'defaultpaymentaccount'},
                            {name: 'defaultreceiptaccount'},
                            {name: 'financialaccount'},   {name: 'financialaccounttext'},
                            {name: 'lastreconciledamount'},
                            {name: 'lastreconcileddate'},
                            {name: 'notes'},
                            {name: 'statementfrequency'}, {name: 'statementfrequencytext'},
                            {name: 'status'},
                            {name: 'title'},
                            {name: 'terminalid'},
                            {name: 'guid'}
                        ],
                        filters: filters,
                        rows: 99999,
                        callback: 'ai-financials-util-bank-accounts',
                        callbackParam: param
                    });
                }
                else
                {
                    var bankAccounts = mydigitalstructure.set(
                    {
                        scope: 'ai-financials-util',
                        context: 'bank-accounts',
                        value: response.data.rows
                    });

                    mydigitalstructure._util.message(bankAccounts, 'ai-financials-util:bank-accounts');

                    mydigitalstructure._util.onComplete(param);
                }
            }
        });

        //-- STATUS

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-transactions-status',
            code: function (param, response)
            {
                if (response == undefined)
                {
                    var filters =
                    [
                        {
                            field: 'bankaccount',
                            comparison: 'IS_NOT_NULL'
                        },
                        {
                            field: 'status',
                            comparison: 'IN_LIST',
                            value: '1,3'
                        }
                    ];

                    mydigitalstructure.cloud.search(
                    {
                        object: 'financial_bank_account_transaction',
                        fields:
                        [
                            {name: 'bankaccount'},
                            {name: 'bankaccounttext'},
                            {name: 'status'},
                            {name: 'count(id) bankaccounttotal'}
                        ],
                        filters: filters,
                        sorts:
                        [
                            {
                                name: 'bankaccounttext',
                                direction: 'asc'
                            },
                            {
                                name: 'status',
                                direction: 'asc'
                            }
                        ],  
                        rows: 99999,
                        callback: 'ai-financials-util-bank-accounts-transactions-status',
                        callbackParam: param
                    });
                }
                else
                {
                    var bankAccounts = mydigitalstructure.set(
                    {
                        scope: 'ai-financials-util',
                        context: 'bank-accounts-transactions-status',
                        value: response.data.rows
                    });

                    mydigitalstructure._util.message(bankAccounts, 'ai-financials-util:bank-accounts-transactions-status');

                    mydigitalstructure._util.onComplete(param);
                }
            }
        });		

        //-- TRANSACTION MAPPINGS

        /*
                https://docs.mydigitalstructure.cloud/FINANCIAL_BANK_ACCOUNT_TRANSACTION_MAPPING_SEARCH

                mapfrom; 1=Credit,2=Debit
                descriptionmatchtype; 1=Exactly Matches Text,2=Contains Text
                matchtype; 1=Code,2=Description,3=Code and Description
                type; 1=No Confirmation,2=Requires Confimation,3=No Confirmation Required & Transfer To Financials

        */

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-mappings',
            code: function (param, response)
            {
                if (response == undefined)
                {
                    var filters =
                    [
                        {
                            field: 'status',
                            comparison: 'IN_LIST',
                            value: '2'
                        }
                    ];

                    mydigitalstructure.cloud.search(
                    {
                        object: 'financial_bank_account_transaction_mapping',
                        fields:
                        [
                            {name: 'bankaccount'},
                            {name: 'bankaccounttext'},
                            {name: 'area'}, {name: 'areatext'},
                            {name: 'descriptionmatchtype'}, {name: 'descriptionmatchtypetext'},
                            {name: 'mapfromdescription'},
                            {name: 'mapfrom'}, {name: 'mapfromtext'},
                            {name: 'maptocontactbusiness'}, {name: 'maptocontactbusinesstext'},
                            {name: 'maptocontactperson'}, {name: 'maptocontactpersontext'},
                            {name: 'maptodescription'},
                            {name: 'maptofinancialaccount'}, {name: 'maptofinancialaccounttext'},
                            {name: 'matchtype'}, {name: 'matchtypetext'},
                            {name: 'notes'},
                            {name: 'project'}, {name: 'projecttext'},
                            {name: 'status'}, {name: 'statustext'},
                            {name: 'taxtype'}, {name: 'taxtypeexpensetext'}, {name: 'taxtyperevenuetext'},
                            {name: 'type'}, {name: 'typetext'}
                        ],
                        filters: filters,
                        sorts:
                        [
                            {
                                name: 'bankaccounttext',
                                direction: 'asc'
                            },
                            {
                                name: 'status',
                                direction: 'asc'
                            }
                        ],  
                        rows: 99999,
                        callback: 'ai-financials-util-bank-accounts-mappings',
                        callbackParam: param
                    });
                }
                else
                {
                    var bankAccountsMappings = mydigitalstructure.set(
                    {
                        scope: 'ai-financials-util',
                        context: 'bank-accounts-mappings',
                        value: response.data.rows
                    });

                    mydigitalstructure._util.message(bankAccountsMappings, 'ai-financials-util:bank-accounts-mappings');

                    mydigitalstructure._util.onComplete(param);
                }
            }
        });		

        // APPLY MAPPING

        /*
            https://docs.mydigitalstructure.cloud/FINANCIAL_BANK_ACCOUNT_TRANSACTION_SEARCH

            Status:
            1=Uploaded, [New]
            2=Matched to Payment / Receipt,
            3=Confirmed/Merged,
            4=Previously Transferred to Financials,
            6=Linked to Expense / Invoice
        */

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-mappings-apply',
            code: function (param, response)
            {
                var event = mydigitalstructure.get({scope: '_event'});

                if (response == undefined)
                {
                    var filters =
                    [
                        {
                            field: 'status',
                            comparison: 'IN_LIST',
                            value: '1'
                        }
                    ];

                    if (event.bankAccountID != undefined)
                    {
                        filters.push(
                        {
                            field: 'bankaccount',
                            comparison: 'IN_LIST',
                            value: event.bankAccountID
                        });
                    }
                    else
                    {
                        filters.push(
                        {
                            field: 'bankaccount',
                            comparison: 'IS_NOT_NULL'
                        });
                    }

                    mydigitalstructure.cloud.search(
                    {
                        object: 'financial_bank_account_transaction',
                        fields:
                        [
                            {name: 'bankaccount'},
                            {name: 'bankaccounttext'},
                            {name: 'amount'},
                            {name: 'description'},
                            {name: 'area'}, {name: 'areatext'},
                            {name: 'capital'},
                            {name: 'category'}, {name: 'categorytext'},
                            {name: 'contactbusiness'}, {name: 'contactbusinesstext'},
                            {name: 'contactperson'}, {name: 'contactpersontext'},
                            {name: 'externalid'},
                            {name: 'financialaccount'}, {name: 'financialaccounttext'},
                            {name: 'object'}, {name: 'objecttext'}, {name: 'objectcontext'},
                            {name: 'posteddate'},
                            {name: 'project'}, {name: 'projecttext'},
                            {name: 'source'}, {name: 'sourcetext'},
                            {name: 'sourcebalance'},
                            {name: 'sourcetype'},
                            {name: 'status'}, {name: 'statustext'},
                            {name: 'taxtype'}, {name: 'taxtypeexpensetext'}, {name: 'taxtyperevenuetext'},
                            {name: 'type'}, {name: 'typetext'},
                            {name: 'createddate'}, {name: 'createduser'},
                            {name: 'modifieddate'},  {name: 'modifieduser'}
                        ],
                        filters: filters,
                        sorts:
                        [
                            {
                                name: 'posteddate',
                                direction: 'asc'
                            }
                        ],  
                        rows: 200,
                        callback: 'ai-financials-util-bank-accounts-mappings-apply',
                        callbackParam: param
                    });
                }
                else
                {
                    var bankAccountTransactions = mydigitalstructure.set(
                    {
                        scope: 'ai-financials-util',
                        context: 'bank-accounts-transactions',
                        value: response.data.rows
                    });

                   //mydigitalstructure._util.message(bankAccountTransactions, 'ai-financials-util:bank-accounts-mappings-apply:1');

                   //mydigitalstructure.invoke('util-end', bankAccountTransactions)

                    _.each(bankAccountTransactions, function (bankAccountTransaction)
                    {
                        //console.log(bankAccountTransaction);

                        mydigitalstructure.invoke('ai-financials-util-bank-accounts-mappings-apply-match',
                        {
                            transaction: bankAccountTransaction
                        })
                    });

                    //mydigitalstructure._util.message(bankAccountTransactions, 'ai-financials-util:bank-accounts-mappings-apply');

                    //mydigitalstructure.invoke('util-end', bankAccountTransactions)

                    mydigitalstructure.set(
                    {
                        scope: 'ai-financials-util',
                        context: 'bank-accounts-transactions',
                        value: bankAccountTransactions
                    });

                    mydigitalstructure.invoke('ai-financials-util-bank-accounts-transactions-match-to-financial-data', param);
                }
            }
        });
        
        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-mappings-apply-match',
            code: function (param)
            {
                var transaction = mydigitalstructure._util.param.get(param, 'transaction').value;
                var refresh = mydigitalstructure._util.param.get(param, 'refesh', {default: false}).value;

                if (transaction.status == 1 || transaction.status == 3 || refresh)
                {	
                    var bankAccountsMappings = mydigitalstructure.get(
                    {
                        scope: 'ai-financials-util',
                        context: 'bank-accounts-mappings'
                    });

                    var bankAccountMappings = _.filter(bankAccountsMappings, function (bankAccountsMapping)
                    {
                        return ((bankAccountsMapping.bankaccount == transaction.bankaccount ||
                                    bankAccountsMapping.bankaccount == '')
                                    && transaction.type == bankAccountsMapping.mapfrom)
                    });

                    //mydigitalstructure.invoke('util-end', bankAccountMappings)
                
                    transaction._matchingMappings = _.filter(bankAccountMappings, function (bankAccountMapping)
                    {
                        var match = false;

                        if (bankAccountMapping.descriptionmatchtype == 1)
                        {	
                            if ((transaction.description).toUpperCase() == (bankAccountMapping.mapfromdescription).toUpperCase()) {match = true};
                        }	
    
                        if (bankAccountMapping.descriptionmatchtype == 2 && bankAccountMapping.mapfromdescription != '')
                        {	
                            if ((transaction.description).toUpperCase().indexOf((bankAccountMapping.mapfromdescription).toUpperCase()) != -1) {match = true};
                        }
                        
                        return match;
                    });
                }
            }
        });

          // MATCH BASED ON EXISTING FINANCIAL DATA
          // Debit; Invoices / Receipts
          // Credit; Expenses / Payments

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-transactions-match-to-financial-data',
            code: function (param)
            {
                var bankAccountTransactions = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions'
                });

                var bankAccountTransactionsUnmatched = mydigitalstructure.set(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-unmatched',
                    value: _.filter(bankAccountTransactions, function (bankAccountTransaction)
                    {
                        return (bankAccountTransaction._matchingMappings.length == 0)
                    })
                });

                if (bankAccountTransactionsUnmatched.length == 0)
                {
                    mydigitalstructure._util.onComplete(param);
                }
                else
                {
                    mydigitalstructure.set(
                    {
                        scope: 'ai-financials-util',
                        context: 'bank-accounts-transactions-match-to-financial-data-index',
                        value: 0
                    });

                    mydigitalstructure.invoke('ai-financials-util-bank-accounts-transactions-match-to-financial-data-process', param);
                }
            }
        });

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-transactions-match-to-financial-data-process',
            note: 'Stage 1; See if exact financial incurred data (invoice/expense)',
            code: function (param)
            {
                var event = mydigitalstructure.get({scope: '_event'});

                var transaction = mydigitalstructure._util.param.get(param, 'transaction').value;
                var refresh = mydigitalstructure._util.param.get(param, 'refesh', {default: false}).value;

                var index = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-match-to-financial-data-index',
                    valueDefault: 0
                });

                var stage = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-match-to-financial-data-stage',
                    valueDefault: 1
                });

                var bankAccountTransactionsUnmatched = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-unmatched'
                });
                
                if (index < bankAccountTransactionsUnmatched.length)
                {
                    var transaction = bankAccountTransactionsUnmatched[index];

                    transaction._description = _.split(transaction.description, ' ');
                    if (transaction._financialData == undefined)
                         { transaction._financialData = {} }

                    console.log(transaction);

                    transaction._financialData.search =
                    {
                        rows: 999,
                        callback: 'ai-financials-util-bank-accounts-transactions-match-to-financial-data-next',
                        callbackParam: param
                    };

                    if (transaction.type == 1) //CREDIT
                    {
                        if (stage == 1) //INCURRED
                        {    
                            transaction._financialData.search.object = 'financial_invoice';
                            transaction._financialData.fields =
                            {
                                date: 'duedate',
                                amount: 'outstandingamount',
                                suffix: 'sentto'
                            }

                            transaction._financialData.search.fields =
                            [
                                {name: 'reference'},
                                {name: 'amount'},
                                {name: 'duedate'},
                                {name: 'outstandingamount'},
                                {name: 'contactbusinesssentto'},
                                {name: 'contactpersonsentto'},
                                {name: 'contactbusinesssenttotext'},
                                {name: 'contactpersonsenttotext'}
                            ];
    
                            transaction._financialData.search.filters =
                            [
                                {
                                    field: 'duedate',
                                    comparison: 'LESS_THAN_OR_EQUAL_TO',
                                    value: moment(transaction.posteddate, 'D MMM YYYY').add(30, 'days').format('D MMM YYYY')
                                },
                                {
                                    field: 'duedate',
                                    comparison: 'GREATER_THAN_OR_EQUAL_TO',
                                    value: moment(transaction.posteddate, 'D MMM YYYY').add(-365, 'days').format('D MMM YYYY')
                                } ,
                                {
                                    field: 'outstandingamount',
                                    comparison: 'NOT_EQUAL_TO',
                                    value: 0
                                }
                            ];

                            transaction._financialData.search.sorts =
                            [
                                {
                                    name: 'duedate',
                                    direction: 'asc'
                                }
                            ] 
                        }
                    }

                    if (transaction.type == 2) //DEBIT
                    {
                        if (stage == 1) //INCURRED
                        {    
                            transaction._financialData.search.object = 'financial_expense';
                            transaction._financialData.fields =
                            {
                                date: 'paymentduedate',
                                amount: 'outstandingamount',
                                suffix: 'paidto'
                            }

                            transaction._financialData.search.fields =
                            [
                                {name: 'reference'},
                                {name: 'amount'},
                                {name: 'paymentduedate'},
                                {name: 'outstandingamount'},
                                {name: 'contactbusinesspaidto'},
                                {name: 'contactpersonpaidto'},
                                {name: 'contactbusinesspaidtotext'},
                                {name: 'contactpersonpaidtotext'}
                            ];
    
                            transaction._financialData.search.filters =
                            [
                                {
                                    field: 'paymentduedate',
                                    comparison: 'LESS_THAN_OR_EQUAL_TO',
                                    value: moment(transaction.posteddate, 'D MMM YYYY').add(30, 'days').format('D MMM YYYY')
                                },
                                {
                                    field: 'paymentduedate',
                                    comparison: 'GREATER_THAN_OR_EQUAL_TO',
                                    value: moment(transaction.posteddate, 'D MMM YYYY').add(-365, 'days').format('D MMM YYYY')
                                } ,
                                {
                                    field: 'outstandingamount',
                                    comparison: 'NOT_EQUAL_TO',
                                    value: 0
                                }
                            ];

                            transaction._financialData.search.sorts =
                            [
                                {
                                    name: 'paymentduedate',
                                    direction: 'asc'
                                }
                            ] 
                        }
                    }
                   
                    mydigitalstructure.cloud.search(transaction._financialData.search);
                }
                else
                {
                    mydigitalstructure.invoke('ai-financials-util-bank-accounts-based-on-past-match', param)
                }
            }
        });

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-transactions-match-to-financial-data-next',
            code: function (param, response)
            {
                var bankAccountTransactionsUnmatched = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-unmatched'
                });

                var index = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-match-to-financial-data-index',
                    valueDefault: 0
                });

                var transaction = bankAccountTransactionsUnmatched[index];
                console.log(transaction)

                var financialData = response.data.rows;
                console.log(financialData);

                var contactbusinessField = 'contactbusiness' + transaction._financialData.fields.suffix;

                var _financialDataByContactBusiness = _.groupBy(financialData, contactbusinessField);

                var financialDataByContactBusiness = [];

                _.each(_financialDataByContactBusiness, function (data, contactbusiness)
                {
                    financialDataByContactBusiness.push(
                    {
                        contactbusiness: contactbusiness,
                        outstandingamount: _.sumBy(data, function (data) {return numeral(data.outstandingamount).value()}),
                        data: data
                    });
                })

                //mydigitalstructure.invoke('util-end', financialDataByContactBusiness)

                transaction._financialData.matching = {};

                transaction._financialData.matching.amount = _.filter(response.data.rows, function (financialData)
                {
                    return numeral(financialData[transaction._financialData.fields.amount]).value() == numeral(transaction.amount).value()
                });

                transaction._financialData.matching.date = _.filter(response.data.rows, function (financialData)
                {
                    return financialData[transaction._financialData.fields.date] == numeral(transaction.amount).value()
                });

                console.log(transaction)

                mydigitalstructure.set(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-match-to-financial-data-index',
                    value: index + 1
                });

                mydigitalstructure.invoke('ai-financials-util-bank-accounts-transactions-match-to-financial-data-process', param)
            }
        });

        // MATCH BASED ON PREVIOUS TRANSACTIONS

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-based-on-past-match',
            code: function (param)
            {
                var bankAccountTransactions = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions'
                });

                var bankAccountTransactionsUnmatched = mydigitalstructure.set(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-unmatched',
                    value: _.filter(bankAccountTransactions, function (bankAccountTransaction)
                    {
                        return (bankAccountTransaction._matchingMappings.length == 0)
                    })
                });

                if (bankAccountTransactionsUnmatched.length == 0)
                {
                    mydigitalstructure._util.onComplete(param);
                }
                else
                {
                    mydigitalstructure.set(
                    {
                        scope: 'ai-financials-util',
                        context: 'bank-accounts-transactions-unmatched-index',
                        value: 0
                    });

                    mydigitalstructure.invoke('ai-financials-util-bank-accounts-based-on-past-match-process', param);
                }
            }
        });

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-based-on-past-match-process',
            note: 'Stage 1; See if exact match on amount/description',
            code: function (param)
            {
                var event = mydigitalstructure.get({scope: '_event'});

                var transaction = mydigitalstructure._util.param.get(param, 'transaction').value;
                var refresh = mydigitalstructure._util.param.get(param, 'refesh', {default: false}).value;

                var index = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-unmatched-index',
                    valueDefault: 0
                });

                var stage = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-unmatched-stage',
                    valueDefault: 1
                });

                var bankAccountTransactionsUnmatched = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-unmatched'
                });
               
                if (index < bankAccountTransactionsUnmatched.length)
                {
                    var transaction = bankAccountTransactionsUnmatched[index];
                    console.log(transaction);

                    var filters =
                    [
                        {
                            field: 'status',
                            comparison: 'IN_LIST',
                            value: '2'
                        },
                        {
                            field: 'type',
                            comparison: 'EQUAL_TO',
                            value: transaction.type
                        },
                    ];

                    if (event.bankAccountID != undefined)
                    {
                        filters.push(
                        {
                            field: 'bankaccount',
                            comparison: 'IN_LIST',
                            value: event.bankAccountID
                        });
                    }
                    else
                    {
                        filters.push(
                        {
                            field: 'bankaccount',
                            comparison: 'IS_NOT_NULL'
                        });
                    }

                    if (stage == 1)
                    {
                        filters.push(
                        {
                            field: 'amount',
                            comparison: 'EQUAL_TO',
                            value: transaction.amount
                        });

                        filters.push(
                        {
                            field: 'description',
                            comparison: 'EQUAL_TO',
                            value: transaction.description
                        });

                        transaction._description = _.split(transaction.description, ' ');
                    }

                    mydigitalstructure.cloud.search(
                    {
                        object: 'financial_bank_account_transaction',
                        fields:
                        [
                            {name: 'bankaccount'},
                            {name: 'amount'},
                            {name: 'description'},
                            {name: 'area'}, {name: 'areatext'},
                            {name: 'capital'},
                            {name: 'contactbusiness'},
                            {name: 'contactperson'},
                            {name: 'financialaccount'},
                            {name: 'object'},
                            {name: 'project'}, {name: 'projecttext'},
                            {name: 'taxtype'}, {name: 'taxtypeexpensetext'}, {name: 'taxtyperevenuetext'}
                        ],
                        filters: filters,
                        sorts:
                        [
                            {
                                name: 'posteddate',
                                direction: 'desc'
                            }
                        ],  
                        rows: 1,
                        callback: 'ai-financials-util-bank-accounts-based-on-past-match-next',
                        callbackParam: param
                    });
                }
                else
                {
                    //mydigitalstructure.invoke('ai-financials-util-bank-accounts-matched-transactions-save');
                    console.log(param)
                    mydigitalstructure._util.onComplete(param);
                }
            }
        });

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-based-on-past-match-next',
            code: function (param, response)
            {
                var index = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-unmatched-index',
                    valueDefault: 0
                });

                mydigitalstructure.set(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-unmatched-index',
                    value: index + 1
                });

                //TODO - check for match

                mydigitalstructure.invoke('ai-financials-util-bank-accounts-based-on-past-match-process', param)
            }
        });


        //-- SAVE MATCHED TRANSACTIONS

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-matched-transactions-save',
            code: function (param)
            {
                var bankAccountTransactions = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions'
                });

                console.log(bankAccountTransactions)

                var bankAccountTransactionsMatched = mydigitalstructure.set(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-matched',
                    value: _.filter(bankAccountTransactions, function (bankAccountTransaction)
                    {
                        return (bankAccountTransaction._matchingMappings.length != 0)
                    })
                });
    
                mydigitalstructure.set(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-matched-index',
                    value: 0
                });

                mydigitalstructure.invoke('ai-financials-util-bank-accounts-matched-transactions-save-process', param);
            }
        });
     
      

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-matched-transactions-save-process',
            code: function (param)
            {
                var event = mydigitalstructure.get({scope: '_event'});

                var bankAccountTransactionsMatched = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-matched'
                });
        
                var index = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-matched-index',
                    valueDefault: 0
                });

                if (index < bankAccountTransactionsMatched.length)
                {
                    var transaction = bankAccountTransactionsMatched[index];
                    console.log(transaction);

                    var saveData =
                    {
                        id: transaction.id,
                        status: 3
                    }

                    if (numeral(transaction.amount).value() == 0)
                    {
                        saveData.status = 2
                    }

                    transaction.matchedMapping = _.first(transaction._matchingMappings);

                    if (transaction.matchedMapping.maptofinancialaccount != '') {saveData.financialaccount = transaction.matchedMapping.maptofinancialaccount}
                    
                    if (transaction.matchedMapping.maptodescription != '') {saveData.description = transaction.matchedMapping.maptodescription}
                    
                    if (transaction.matchedMapping.taxtype != '') {saveData.taxtype = transaction.matchedMapping.taxtype}
                    
                    if (transaction.matchedMapping.maptocontactbusiness != '' && transaction.matchedMapping.maptocontactbusiness != 0)
                    {
                        saveData.contactbusiness = transaction.matchedMapping.maptocontactbusiness
                    }
                    if (transaction.matchedMapping.maptocontactperson != '' && transaction.matchedMapping.maptocontactperson != 0)
                    {
                        saveData.contactperson = transaction.matchedMapping.maptocontactperson
                    }
                    
                    console.log(saveData)

                    mydigitalstructure.cloud.save(
                    {
                        object: 'financial_bank_account_transaction',
                        data: saveData,
                        callback: 'ai-financials-util-bank-accounts-matched-transactions-save-next',
                        callbackParam: param
                    });
                }
                else
                {
                    mydigitalstructure._util.onComplete(param);
                }
            }
        });

        mydigitalstructure.add(
        {
            name: 'ai-financials-util-bank-accounts-matched-transactions-save-next',
            code: function (param, response)
            {
                var index = mydigitalstructure.get(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-matched-index',
                    valueDefault: 0
                });

                mydigitalstructure.set(
                {
                    scope: 'ai-financials-util',
                    context: 'bank-accounts-transactions-matched-index',
                    value: index + 1
                });

                mydigitalstructure.invoke('ai-financials-util-bank-accounts-matched-transactions-save-process', param)
            }
        });
	}
}

/*
if (reset)
{
    saveData.financialaccount = '';
    saveData.contactbusiness = '';
    saveData.contactperson = '';	
}
*/	